<?php

namespace Governor\Tests\Domain;

use Governor\Framework\Domain\MetaData;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-01-30 at 23:57:23.
 */
class MetaDataTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var MetaData
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new MetaData(array('first' => 'string', 'second' => 1000));
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    /**
     * @covers Governor\Framework\Domain\MetaData::all
     */
    public function testAll()
    {
        $this->assertCount(2, $this->object->all());
    }

    /**
     * @covers Governor\Framework\Domain\MetaData::keys
     */
    public function testKeys()
    {
        $keys = $this->object->keys();

        $this->assertCount(2, $keys);
        $this->assertContains('first', $keys);
        $this->assertContains('second', $keys);
    }

    /**
     * @covers Governor\Framework\Domain\MetaData::get
     */
    public function testGet()
    {
        $value = $this->object->get('first');
        $this->assertEquals('string', $value);
    }

    /**
     * @covers Governor\Framework\Domain\MetaData::get
     */
    public function testGetOnNonexistingKey()
    {
        $this->assertNull($this->object->get('nonexisting'));
    }

    /**
     * @covers Governor\Framework\Domain\MetaData::has
     */
    public function testHas()
    {
        $this->assertTrue($this->object->has('first'));
        $this->assertFalse($this->object->has('nonexisting'));
    }

    /**
     * @covers Governor\Framework\Domain\MetaData::count
     */
    public function testCount()
    {
        $this->assertEquals(2, $this->object->count());
    }

    /**
     * @covers Governor\Framework\Domain\MetaData::getIterator
     */
    public function testGetIterator()
    {
        $it = $this->object->getIterator();
        $this->assertInstanceof('\ArrayIterator', $it);
    }

    /**
     * @covers Governor\Framework\Domain\MetaData::__construct
     */
    public function testCreateMetaData()
    {
        $metaDataValues = array('first' => 'value');
        $metaData = new MetaData($metaDataValues);
        $metaDataValues['second'] = 'value';

        $this->assertEquals('value', $metaData->get('first'));
        $this->assertFalse($metaData->has('second'));
    }

    /**
     * @covers Governor\Framework\Domain\MetaData::mergeWith
     */
    public function testMergedMetaData()
    {
        $metaDataValues = array('first' => 'value');
        $metaData = new MetaData($metaDataValues);
        $metaDataValues['second'] = 'value';
        $metaDataValues['first'] = 'other';

        $newMetaData = $metaData->mergeWith($metaDataValues);
        $this->assertEquals('other', $newMetaData->get('first'));
        $this->assertEquals('value', $newMetaData->get('second'));
    }

    /**
     * @covers Governor\Framework\Domain\MetaData::withoutKeys
     */
    public function testRemovedMetaData()
    {
        $metaDataValues = array('first' => 'value', 'second' => 'value');
        $metaData = new MetaData($metaDataValues);

        $newMetaData = $metaData->withoutKeys(array('first', 'second'));
        $this->assertTrue($newMetaData->isEmpty());
    }

    /**
     * @covers Governor\Framework\Domain\MetaData::isEqualTo
     */
    public function testEquals()
    {
        $metaDataValues = array('first' => 'value');
        $metaData1 = new MetaData($metaDataValues);
        $metaDataValues['second'] = 'value';
        $metaData2 = new MetaData($metaDataValues);
        $metaData3 = new MetaData($metaDataValues);

        $this->assertEquals($metaData1, $metaData1);
        $this->assertEquals($metaData2, $metaData3);


        $this->assertFalse($metaData1->isEqualTo($metaData2));
        $this->assertFalse($metaData1->isEqualTo($metaData3));
        $this->assertFalse($metaData3->isEqualTo($metaData1));
        $this->assertFalse($metaData1->isEqualTo(null));
    }

    /**
     * @covers Governor\Framework\Domain\MetaData::emptyInstance
     * @covers Governor\Framework\Domain\MetaData::isEmpty
     */
    public function testEmptyInstance()
    {
        $metaData1 = MetaData::emptyInstance();
        $metaData2 = MetaData::emptyInstance();

        $this->assertEquals($metaData1, $metaData2);
        $this->assertTrue($metaData1->isEmpty());
    }  
}
